name: CI

on: [push, pull_request]

jobs:
  lint:
    name: Lint

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1

      - name: Install Dependencies
        run: yarn install

      - name: Lint
        run: yarn lint

  test:
    name: Test

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout Submodules
        run: git submodule update --init --recursive

      - name: Setup Node
        uses: actions/setup-node@v1

      - name: Install Dependencies
        run: yarn install

      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Test
        run: yarn test

  coverage:
    name: Coverage

    needs: [lint, test]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout Submodules
        run: git submodule update --init --recursive

      - name: Setup Node
        uses: actions/setup-node@v1

      - name: Install Dependencies
        run: yarn install

      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Calculate Coverage
        run: yarn test --coverage

      - name: Upload Coverage
        uses: codecov/codecov-action@v1

  deploy:
    name: Deploy

    runs-on: ubuntu-latest

    needs: [lint, test]

    if: >
      startsWith(github.ref, 'refs/tags/v') &&
      github.repository == 'arnohovhannisyan/vscode-syncify'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout Submodules
        run: git submodule update --init --recursive

      - name: Setup Node
        uses: actions/setup-node@v1

      - name: Install Dependencies
        run: yarn install

      - name: Build
        run: yarn vsce package

      - name: Publish
        run: yarn vsce publish -p ${{ secrets.VS_TOKEN }}

      - name: Setup Release Environment
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          echo -e "::set-env name=RELEASE_NOTES::## Changes\n\n$(git log $(git log --tags --no-walk --pretty="format:%d" | sed 2q | sed "s/[()]//g; s ......  ; 1d")..@ --oneline --pretty=format:"%h %s" | awk '{print "- "$0}')"
          echo "::set-env name=VSIX_VERSION::$(printf $GITHUB_REF | sed 's/refs\/tags\/v//')"

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VSIX_VERSION }}
          release_name: v${{ env.VSIX_VERSION }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false

      - name: Release Artifacts
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./syncify-${{ env.VSIX_VERSION }}.vsix
          asset_name: syncify-${{ env.VSIX_VERSION }}.vsix
          asset_content_type: application/zip
