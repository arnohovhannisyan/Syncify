name: CI

on:
  push:
    branches: master

jobs:
  test:
    name: Test

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout Submodules
        run: git submodule update --init --recursive

      - name: Setup Node
        uses: actions/setup-node@v1

      - name: Install Dependencies
        run: yarn install

      - name: Configure Git
        run: |
          git config --global user.email "travis@travis-ci.com"
          git config --global user.name "Travis"

      - name: Test
        run: yarn test

  coverage:
    name: Coverage

    needs: test

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout Submodules
        run: git submodule update --init --recursive

      - name: Setup Node
        uses: actions/setup-node@v1

      - name: Install Dependencies
        run: yarn install

      - name: Configure Git
        run: |
          git config --global user.email "travis@travis-ci.com"
          git config --global user.name "Travis"

      - name: Calculate Coverage
        run: yarn test --coverage

      - name: Upload Coverage
        run: yarn codecov

  deploy:
    name: Deploy

    runs-on: ubuntu-latest

    needs: test

    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout Submodules
        run: git submodule update --init --recursive

      - name: Setup Node
        uses: actions/setup-node@v1

      - name: Install Dependencies
        run: yarn install

      - name: Build
        run: yarn vsce package

      - name: Publish
        run: yarn vsce publish -p ${{ secrets.VS_TOKEN }}

      - name: Setup Release Environment
        run: |
          export RELEASE_NOTES=$'## Changes\n\n'
          export RELEASE_NOTES+=$(git log $(git log --tags --no-walk --pretty="format:%d" | sed 2q | sed "s/[()]//g; s ......  ; 1d")..@ --oneline --pretty=format:"%h %s" | awk '{print "- "$0}')
          export VSIX_VERSION=$(echo ${{ github.ref }} | cut -c2-)

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false

      - name: Release Artifacts
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./syncify-${{ env.VSIX_VERSION }}.vsix
          asset_name: syncify-${{ env.VSIX_VERSION }}.vsix
          asset_content_type: application/zip
